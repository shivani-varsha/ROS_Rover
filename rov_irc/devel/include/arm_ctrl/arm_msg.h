// Generated by gencpp from file arm_ctrl/arm_msg.msg
// DO NOT EDIT!


#ifndef ARM_CTRL_MESSAGE_ARM_MSG_H
#define ARM_CTRL_MESSAGE_ARM_MSG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace arm_ctrl
{
template <class ContainerAllocator>
struct arm_msg_
{
  typedef arm_msg_<ContainerAllocator> Type;

  arm_msg_()
    : base_motor(0)
    , link_1(0)
    , link_2(0)
    , link_3(0)
    , waist(0)
    , claw(0)  {
    }
  arm_msg_(const ContainerAllocator& _alloc)
    : base_motor(0)
    , link_1(0)
    , link_2(0)
    , link_3(0)
    , waist(0)
    , claw(0)  {
  (void)_alloc;
    }



   typedef int16_t _base_motor_type;
  _base_motor_type base_motor;

   typedef int16_t _link_1_type;
  _link_1_type link_1;

   typedef int16_t _link_2_type;
  _link_2_type link_2;

   typedef int16_t _link_3_type;
  _link_3_type link_3;

   typedef int16_t _waist_type;
  _waist_type waist;

   typedef int16_t _claw_type;
  _claw_type claw;





  typedef boost::shared_ptr< ::arm_ctrl::arm_msg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::arm_ctrl::arm_msg_<ContainerAllocator> const> ConstPtr;

}; // struct arm_msg_

typedef ::arm_ctrl::arm_msg_<std::allocator<void> > arm_msg;

typedef boost::shared_ptr< ::arm_ctrl::arm_msg > arm_msgPtr;
typedef boost::shared_ptr< ::arm_ctrl::arm_msg const> arm_msgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::arm_ctrl::arm_msg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::arm_ctrl::arm_msg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::arm_ctrl::arm_msg_<ContainerAllocator1> & lhs, const ::arm_ctrl::arm_msg_<ContainerAllocator2> & rhs)
{
  return lhs.base_motor == rhs.base_motor &&
    lhs.link_1 == rhs.link_1 &&
    lhs.link_2 == rhs.link_2 &&
    lhs.link_3 == rhs.link_3 &&
    lhs.waist == rhs.waist &&
    lhs.claw == rhs.claw;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::arm_ctrl::arm_msg_<ContainerAllocator1> & lhs, const ::arm_ctrl::arm_msg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace arm_ctrl

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::arm_ctrl::arm_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::arm_ctrl::arm_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_ctrl::arm_msg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::arm_ctrl::arm_msg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_ctrl::arm_msg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::arm_ctrl::arm_msg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::arm_ctrl::arm_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b0a36bb5dec1345af28caa5406649a86";
  }

  static const char* value(const ::arm_ctrl::arm_msg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb0a36bb5dec1345aULL;
  static const uint64_t static_value2 = 0xf28caa5406649a86ULL;
};

template<class ContainerAllocator>
struct DataType< ::arm_ctrl::arm_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "arm_ctrl/arm_msg";
  }

  static const char* value(const ::arm_ctrl::arm_msg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::arm_ctrl::arm_msg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16 base_motor\n"
"int16 link_1\n"
"int16 link_2\n"
"int16 link_3\n"
"int16 waist\n"
"int16 claw\n"
;
  }

  static const char* value(const ::arm_ctrl::arm_msg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::arm_ctrl::arm_msg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.base_motor);
      stream.next(m.link_1);
      stream.next(m.link_2);
      stream.next(m.link_3);
      stream.next(m.waist);
      stream.next(m.claw);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct arm_msg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::arm_ctrl::arm_msg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::arm_ctrl::arm_msg_<ContainerAllocator>& v)
  {
    s << indent << "base_motor: ";
    Printer<int16_t>::stream(s, indent + "  ", v.base_motor);
    s << indent << "link_1: ";
    Printer<int16_t>::stream(s, indent + "  ", v.link_1);
    s << indent << "link_2: ";
    Printer<int16_t>::stream(s, indent + "  ", v.link_2);
    s << indent << "link_3: ";
    Printer<int16_t>::stream(s, indent + "  ", v.link_3);
    s << indent << "waist: ";
    Printer<int16_t>::stream(s, indent + "  ", v.waist);
    s << indent << "claw: ";
    Printer<int16_t>::stream(s, indent + "  ", v.claw);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ARM_CTRL_MESSAGE_ARM_MSG_H
