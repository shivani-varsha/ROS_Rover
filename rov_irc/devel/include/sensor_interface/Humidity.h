// Generated by gencpp from file sensor_interface/Humidity.msg
// DO NOT EDIT!


#ifndef SENSOR_INTERFACE_MESSAGE_HUMIDITY_H
#define SENSOR_INTERFACE_MESSAGE_HUMIDITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace sensor_interface
{
template <class ContainerAllocator>
struct Humidity_
{
  typedef Humidity_<ContainerAllocator> Type;

  Humidity_()
    : relative_humidity(0.0)  {
    }
  Humidity_(const ContainerAllocator& _alloc)
    : relative_humidity(0.0)  {
  (void)_alloc;
    }



   typedef float _relative_humidity_type;
  _relative_humidity_type relative_humidity;





  typedef boost::shared_ptr< ::sensor_interface::Humidity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::sensor_interface::Humidity_<ContainerAllocator> const> ConstPtr;

}; // struct Humidity_

typedef ::sensor_interface::Humidity_<std::allocator<void> > Humidity;

typedef boost::shared_ptr< ::sensor_interface::Humidity > HumidityPtr;
typedef boost::shared_ptr< ::sensor_interface::Humidity const> HumidityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::sensor_interface::Humidity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::sensor_interface::Humidity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::sensor_interface::Humidity_<ContainerAllocator1> & lhs, const ::sensor_interface::Humidity_<ContainerAllocator2> & rhs)
{
  return lhs.relative_humidity == rhs.relative_humidity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::sensor_interface::Humidity_<ContainerAllocator1> & lhs, const ::sensor_interface::Humidity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace sensor_interface

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::sensor_interface::Humidity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::sensor_interface::Humidity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_interface::Humidity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::sensor_interface::Humidity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_interface::Humidity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::sensor_interface::Humidity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::sensor_interface::Humidity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "798d3911e6b40189d397e11e08a9ad8c";
  }

  static const char* value(const ::sensor_interface::Humidity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x798d3911e6b40189ULL;
  static const uint64_t static_value2 = 0xd397e11e08a9ad8cULL;
};

template<class ContainerAllocator>
struct DataType< ::sensor_interface::Humidity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "sensor_interface/Humidity";
  }

  static const char* value(const ::sensor_interface::Humidity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::sensor_interface::Humidity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 relative_humidity\n"
"\n"
;
  }

  static const char* value(const ::sensor_interface::Humidity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::sensor_interface::Humidity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.relative_humidity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Humidity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::sensor_interface::Humidity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::sensor_interface::Humidity_<ContainerAllocator>& v)
  {
    s << indent << "relative_humidity: ";
    Printer<float>::stream(s, indent + "  ", v.relative_humidity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SENSOR_INTERFACE_MESSAGE_HUMIDITY_H
